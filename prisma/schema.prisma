// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String?  @unique
  passwordHash String?
  name         String
  phone        String?
  city         String?
  age          Int?
  gender       Gender?
  googleId     String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reset        PasswordReset[]
  payments     Payment[]
}

enum Gender {
  laki_laki
  perempuan
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Payment {
  id            String   @id @default(uuid())
  userId        String?
  username      String
  email         String? 
  passwordHash  String?
  name          String?
  status        PaymentStatus @default(PENDING)
  phone         String?
  city          String?
  age           Int?
  gender        Gender?
  orderId       String   @unique
  amount        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User          User?    @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
model Collection {
  id      String @id @default(uuid())
  subject String
  chapter Int
  level   LevelStatus 
}

enum LevelStatus {
  easy
  medium
  hard
}


